// File: app/src/main/java/com/github/bbqribs/pushupstracker/ui/importlog/ImportViewModel.kt
package com.github.bbqribs.pushupstracker.ui.importlog

import android.content.Context
import android.net.Uri
import android.widget.Toast
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.github.bbqribs.pushupstracker.data.Attempt
import com.github.bbqribs.pushupstracker.repository.AttemptRepository
import dagger.hilt.android.lifecycle.HiltViewModel
import dagger.hilt.android.qualifiers.ApplicationContext
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import javax.inject.Inject

@HiltViewModel
class ImportViewModel @Inject constructor(
    private val attemptRepository: AttemptRepository,
    @ApplicationContext private val context: Context // Hilt provides this automatically
) : ViewModel() {

    fun importFromUri(uri: Uri) {
        viewModelScope.launch {
            var importedCount = 0
            var errorCount = 0

            try {
                // Use the IO dispatcher for file reading
                withContext(Dispatchers.IO) {
                    context.contentResolver.openInputStream(uri)?.bufferedReader()?.useLines { lines ->
                        lines.drop(1) // Skip the header row
                            .forEach { line ->
                                val cols = line.split(",")
                                if (cols.size == 6) {
                                    val attempt = Attempt(
                                        // The 'id' will be auto-generated by Room
                                        timestamp = cols[0].toLongOrNull() ?: 0L,
                                        week = cols[1].toIntOrNull() ?: -1,
                                        day = cols[2].toIntOrNull() ?: -1,
                                        column = cols[3].trim(),
                                        outcome = cols[4].trim(),
                                        setsCompleted = cols[5].trim()
                                    )
                                    // Basic validation before inserting
                                    if (attempt.timestamp > 0L) {
                                        attemptRepository.insert(attempt)
                                        importedCount++
                                    } else {
                                        errorCount++
                                    }
                                } else {
                                    errorCount++
                                }
                            }
                    }
                }
                // Show a toast message on the main thread
                Toast.makeText(context, "Import complete! $importedCount attempts added. $errorCount rows failed.", Toast.LENGTH_LONG).show()

            } catch (e: Exception) {
                Toast.makeText(context, "Import failed: ${e.message}", Toast.LENGTH_LONG).show()
            }
        }
    }
}
